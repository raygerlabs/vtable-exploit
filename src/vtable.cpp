#include "monster.hpp"
#include "player.hpp"

#include <cstdint>
#include <cstring>
#include <iostream>
#include <memory>
#include <vector>

constexpr const std::size_t page_length = 4096;
std::uint64_t hooked_vtable[page_length] = {};

void win(void* _this);

void win(void *_this) {
  (void)_this;
  std::cout << ">> You Win!\n";
}

int main() {
  //std::cout << "win function is located at " << std::hex << &win << "\n";
  //std::cout << "Reading into static buffer located at " << std::hex << &hooked_vtable[0] << "\n";

  auto player = std::make_unique<ctf::Player>();
  player->talk();

  std::uint64_t *vtable =
      *reinterpret_cast<std::uint64_t **>(player.get() + 0x00);
  std::cout << "The vtable is located at " << std::hex << vtable << "\n";

  std::uint64_t function_address = vtable[0];

  using function_prototype = void (*)(void *);
  function_prototype fn_talk = nullptr;
  //function_prototype fn_orig = nullptr;
  
  fn_talk = reinterpret_cast<function_prototype>(function_address);
  fn_talk(player.get());

  // vtable swap

  std::memcpy(hooked_vtable, vtable, page_length);
  hooked_vtable[0] = reinterpret_cast<std::uint64_t>(&win);
  //fn_orig = reinterpret_cast<function_prototype>(vtable[0]);
  *reinterpret_cast<void**>(player.get()) = hooked_vtable;

  player->talk();

  while (1) {
  }
}
