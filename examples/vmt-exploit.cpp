#include "vmt/vmt_hook.hpp"

#include <memory>

class Entity
{
public:
  virtual void move() = 0;
  virtual ~Entity() = default;
};

class Player : public Entity
{
public:
  void move() override
  {
    std::cout << "{{ Player:: moved }}\n";
  }
  ~Player() override = default;
};

void win();

void win()
{
  std::cout << "!! YOU WIN !!\n";
}

int main()
{
  auto player = std::make_unique<Player>();
  player->move();
  ctf::vmt_hook vtable_hook(player.get());
  vtable_hook.hook(0, win);
  if (vtable_hook.is_hooked())
  {
    std::cout << ".. player hooked " << vtable_hook.hook_count() << " times\n";
    player->move(); // now it calls 'win' function
  }
  else
  {
    std::cerr << ".. no hooks were added ..\n";
    return -1;
  }
  vtable_hook.unhook(0);
  player->move(); // now it behaves normally again

  while (true)
  {
  }
}
